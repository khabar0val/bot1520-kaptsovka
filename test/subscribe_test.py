from sqlighter import SQLighter
from loguru import logger
import telebot

TOKEN = None
with open("token.txt") as T:
	TOKEN = T.read().strip()

bot = telebot.TeleBot(TOKEN)
db1520 = SQLighter('db1520.db')

@bot.message_handler(commands=['subscribe'])
def subscribe(message):
    try:
        if(not db1520.subscriber_exists(message.from_user.id)):
            # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            db1520.add_subscriber(message.from_user.id)
        else:
            # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            db1520.update_subscription(message.from_user.id, True)
        
        bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –ö–∞–ø—Ü–æ–≤–∫–∏!  üòù\n–°–∫–æ—Ä–æ –≤—ã–π–¥—É—Ç –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –≤—ã —É–∑–Ω–∞–µ—Ç–µ –æ –Ω–∏—Ö –ø–µ—Ä–≤—ã–º–∏ =)")

    except:
        logger.warning("WARNING with subscribe")
        logger.error("ERROR with subscribe")
        logger.critical("CRITICAL with subscribe")